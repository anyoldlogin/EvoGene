This is the main project for an android/desktop evolution simulation.
Let's hope I can continue to update the readme in a timely fashion: ;)
EvoGene is an ai simulator. It basically keeps a bunch of stuff in a grid. So far there re four basic types of stuff. Each location in the EvoGene grid is stored in aPlace. So for a grid of 25 x 25 should have  625 places. 

Each Place has an x and y coordinate as well as state information. A Place doesn't do much on its own. A place has a content. If the content is null the place is empty. Otherwise it is some sort of Agent. 

Agents are things in the world. Things in the word that are currently static are Food. Food cannot move but has energy.  

Agents implement the Actionalble interface.
public interface Actionable {
       public enum Action {
              EAT,
              DIE,
              REPRODUCE,
              MOVE
       }
       public void act(Environment environment);
       public void eat(Agent agent);
       public void kill(Agent agent);
       public Agent[] reproduce(Agent mate);
       public Vector3 move(int x, int y);
}

Some agents such as Food mostly use the default empty methods as they are currently not dynamic. Others such as Bug implement more methods in order to simulate dynamic organisms.

The idea is that each bug will get a HashMap of directions to actions. The directions are easy:

package com.bitsend.evogene;

public enum Direction {
N  (0, -1),
NE  (1, -1),
E  (1, 0),
SE  (1,1),
S (0, 1),
SW (-1, 1),
W (-1, 0),
NW (-1, -1);
public final int xDelta;
public final int yDelta;
Direction(int xDelta, int yDelta) {
this.xDelta = xDelta;
this.yDelta = yDelta;
}
public int getXDelta() {
return this.xDelta;
}
public int getYDelta() {
return this.yDelta;
}
public static Direction RandomDirection() {
int num = (int)Math.floor(Math.random() * 8);
return Direction.values()[num];
}
}


So given a Direction we can figure out an action. Throw it into an ArrayList and loop. I do understand that enums are slow compared to other patterns but I'm just learning here. ;)

Direction dir = Direction.RandomDirection();
int nextX = (int) position.x + dir.getXDelta();
if (world.inWorld(nextX, nextY)) {
     Agent agent = world.getContents(nextX, nextY);
     if (agent instanceof Food) {
eat(world,agent);
moveTo(nextX, nextY);
searching = false;
     }
     else if (agent==null) {
moveTo(nextX, nextY);
searching = false;
     }
}
 


